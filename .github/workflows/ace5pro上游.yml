name: ace5pro上游
on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支"
        required: true
        default: 'sm8750'
      FEIL:
        description: "配置文件"
        required: true
        default: 'oneplus_ace5_pro_v3'
      CPUD:
        description: "处理器代号"
        required: true
        default: 'sun'
      ANDROID_VERSION:
        description: "内核安卓版本"
        required: true
        default: 'android15'
      KERNEL_VERSION:
        description: "内核版本"
        required: true
        default: '6.6'
      KERNEL_NAME:
        description: "修改内核名称"
        required: true
        default: '-android15-8-g013ec21bba94-abogki383916444'
      ENABLE_KPM:
        description: "启用kpm"
        required: false
        default: false
        type: boolean
      local_version:
        description: '输入内核后缀名（如-v8）'
        required: false
        default: '-4k'
        type: string
      remove_default_4k:
        description: '是否删除默认的 -4k 后缀？（勾选则删除）'
        required: false
        default: false
        type: boolean
      sukisu_tag:
        description: "自定义版本来源后缀（如:见清）"
        required: false
        default: "见清🤣👉🏻🤡"
        
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Configure Git
        run: |
         git config --global user.name "build"
         git config --global user.email "2772000679@qq.com"

      # 1. 拉取仓库  
      - name: Checkout  
        uses: actions/checkout@v4  

      # 2. 安装构建依赖（包括 ccache）  
      - name: Install Dependencies  
        run: |  
         sudo apt-get update  
         sudo apt-get install -y python3 git curl ccache libelf-dev
         
      # 3. 恢复 ccache 缓存  
      - name: Restore ccache
        uses: actions/cache@v3
        with:
         path: /home/runner/.ccache
         key: ${{ runner.os }}-${{ github.repository }}-v上游
         restore-keys: |
          ${{ runner.os }}-${{ github.repository }}-
          ${{ runner.os }}-
          ccache-

      # 4. 设置 ccache 环境变量  
      - name: Setup ccache environment  
        run: |  
         echo "CCACHE_DIR=/home/runner/.ccache" >> $GITHUB_ENV  
         echo "CCACHE_MAXSIZE=8G" >> $GITHUB_ENV  
         echo "CCACHE_COMPILERCHECK=%compiler% -dumpmachine; %compiler% -dumpversion" >> $GITHUB_ENV  
         echo "CCACHE_NOHASHDIR=true" >> $GITHUB_ENV  
         echo "CCACHE_HARDLINK=true" >> $GITHUB_ENV  
         echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV  
         echo "CCACHE_LOGFILE=${{ github.workspace }}/ccache.log" >> $GITHUB_ENV  
         echo "/usr/lib/ccache" >> $GITHUB_PATH  
         
      - name: Show ccache stats
        run: |
         ccache -s || true

      - name: Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/aa123330/kernel_manifest.git -b refs/heads/oneplus/${{ github.event.inputs.CPU }} -m ${{ github.event.inputs.FEIL }}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Export suffix
        run: |
          echo "TAG_SUFFIX=${{ github.event.inputs.sukisu_tag }}" >> $GITHUB_ENV
         
      - name: Inject dynamic SukiSU string version
        run: |
         cd kernel_workspace/kernel_platform
         curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
         cd KernelSU
         # 获取自定义后缀（如：见清）
         TAG_SUFFIX="${{ github.event.inputs.sukisu_tag }}"
         # 使用正确变量名 KSU_VERSION_API 替换函数体
         sed -i "/^define get_ksu_version_full$/,/^endef$/c\
         define get_ksu_version_full\\
         v\$(KSU_VERSION_API)-sukisu-\$(KSU_VERSION)-by-$TAG_SUFFIX\\
         endef" kernel/Makefile
         echo "✅ Injected custom version: v\$(KSU_VERSION_API)-sukisu-\$(KSU_VERSION)-by-$TAG_SUFFIX"
         KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10700)
         echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
         export KSU_VERSION=$KSU_VERSION

      - name: Set up SUSFS & apply patches
        run: |
         set -e

         cd kernel_workspace
         git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}
         cd kernel_platform
         cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.ANDROID_VERSION }}-${{ inputs.KERNEL_VERSION }}.patch ./common/ || true
         mkdir -p ./common/fs ./common/include/linux ./common/lib ./common/crypto
         cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/ || true
         cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/ || true
         echo "✅ SUSFS 和 syscall_hooks patch 应用完成"

      - name: Set CONFIG_LOCALVERSION
        if: ${{ inputs.local_version != '-4k' }}
        run: |
         cd kernel_workspace/kernel_platform
         echo "Using local_version: ${{ inputs.local_version }}"
         sed -i "s/CONFIG_LOCALVERSION=\"-4k\"/CONFIG_LOCALVERSION=\"${{ inputs.local_version }}\"/" ./common/arch/arm64/configs/gki_defconfig
         
      - name: Add SUSFS Configuration Settings
        run: |
          cd kernel_workspace/kernel_platform
          # 向 gki_defconfig 中追加配置
          cat <<EOF >> ./common/arch/arm64/configs/gki_defconfig
          # KSU 与 SUSFS 配置
          CONFIG_KSU=y
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          # 启用 ThinLTO 与 Polly 优化器
          CONFIG_LTO_CLANG=y
          CONFIG_LTO_CLANG_THIN=y
          CONFIG_LTO_POLLY=y
          # 启用压缩算法支持
          CONFIG_CRYPTO_LZ4HC=y
          CONFIG_CRYPTO_LZ4K=y
          CONFIG_CRYPTO_LZ4KD=y
          CONFIG_CRYPTO_842=y
          EOF
          # 移除构建流程中的 check_defconfig 校验
          sed -i 's/check_defconfig//' ./common/build.config.gki
          # 提交更改（可选）
          cd common
          git add -A
          git commit -a -m "BUILD Kernel with Polly, KSU, SUSFS and compression configs"
          
      - name: 启用kpm
        if: ${{ fromJSON(github.event.inputs.ENABLE_KPM) }}
        run: |
         cd kernel_workspace/kernel_platform
         echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
         sudo sed -i 's/check_defconfig//' ./common/build.config.gki
         cd common
         git add -A && git commit -a -m "BUILD Kernel"

      - name: 修改内核版本拼接逻辑为占位符（scm_version）
        run: |
         cd kernel_workspace/kernel_platform
         sed -i '186s|echo ".*"|echo "${KERNELVERSION}${scm_version}${config_localversion}"|' ./common/scripts/setlocalversion

      - name: 替换 scm_version 为 KERNEL_NAME
        run: |
         cd kernel_workspace/kernel_platform
         sed -i "s|\${scm_version}|${{ github.event.inputs.KERNEL_NAME }}|g" ./common/scripts/setlocalversion
         
      - name: 设置 CONFIG_LOCALVERSION
        run: |
         cd kernel_workspace/kernel_platform
         echo 'CONFIG_LOCALVERSION="${{ github.event.inputs.local_version }}"' >> ./common/arch/arm64/configs/gki_defconfig
         
      - name: 删除 CONFIG_LOCALVERSION 中的 -4k 后缀（如果勾选）
        if: ${{ fromJSON(github.event.inputs.remove_default_4k) }}
        run: |
         cd kernel_workspace/kernel_platform
         sed -i 's/-4k//' ./common/arch/arm64/configs/gki_defconfig
            
      - name: Set build timestamp
        run: |         
         export SOURCE_DATE_EPOCH=$(date -d "Tue Dec 17 23:36:49 UTC 2024" +%s)
         echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH" >> $GITHUB_ENV

      - name: 拉取afdo
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/egcd521/egcd.git

      - name: Build Kernel
        run: |
         # 加入 clang 到 PATH
         export PATH="${{ github.workspace }}/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"
         # 加入 ccache 到 PATH
         export PATH="/usr/lib/ccache:$PATH" 

         # 设置固定内核构建时间
         export KERNEL_TIME="Tue Dec 17 23:36:49 UTC 2024"
         export KBUILD_BUILD_TIMESTAMP="$KERNEL_TIME"
         export SOURCE_DATE_EPOCH=$(date -d "$KERNEL_TIME" +%s)
         # 设置 AFDO 配置文件路径
         export AFDO_PROFILE="${{ github.workspace }}/kernel_workspace/kernel_platform/egcd/kernel.afdo"
         if [ ! -f "$AFDO_PROFILE" ]; then
           echo "Error: AFDO profile not found at $AFDO_PROFILE"
         exit 1
         fi
         # 打印验证
         echo "KERNEL_TIME = $KERNEL_TIME"
         echo "SOURCE_DATE_EPOCH = $SOURCE_DATE_EPOCH"
         echo "Using KCFLAGS: -Wno-error -fauto-profile=$AFDO_PROFILE"
         # 设置一些通用参数（便于后续维护）
         export KCFLAGS="-Wno-error -fauto-profile=$AFDO_PROFILE"
         export MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
         RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
         PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
         LD=ld.lld HOSTLD=ld.lld O=out SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH}"
         
         # 进入源码目录
         cd kernel_workspace/kernel_platform/common

         # 执行 defconfig
         make -j$(nproc) $MAKE_ARGS gki_defconfig

         # 编译全部目标
         make -j$(nproc) $MAKE_ARGS all

         # 创建输出目录并复制 Image
         mkdir -p ../dist
         cp out/arch/arm64/boot/Image ../dist/
         cp out/vmlinux ../dist/

      - name: 打kpm补丁
        if: ${{ fromJSON(github.event.inputs.ENABLE_KPM) }}
        run: |
         cd kernel_workspace/kernel_platform/dist
         curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
         chmod +x patch_linux
         ./patch_linux
         rm -f Image
         mv oImage Image

      - name: 验证内核构建时间
        run: |
         strings kernel_workspace/kernel_platform/common/out/vmlinux | grep "UTC"

      - name: Prepare AnyKernel3 package
        run: |
          cd kernel_workspace/kernel_platform/dist
          git clone https://github.com/egcd123/AnyKernel3.git AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          rm -f AnyKernel3/push.sh
          cp Image AnyKernel3/

      - name: Upload AnyKernel3 artifact
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_oneplus_ace5pro_${{ env.KSUVER }}_sukisu_shangyou
          path: kernel_workspace/kernel_platform/dist/AnyKernel3/*
